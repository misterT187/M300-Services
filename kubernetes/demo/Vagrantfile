# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  # All Vagrant configuration is done here. The most common configuration
  # options are documented and commented below. For a complete reference,
  # please see the online documentation at vagrantup.com.

  config.vm.synced_folder "data", "/data"
  
  # Every Vagrant virtual environment requires a box to build off of.
  config.vm.define "main" do |main|
    main.vm.box = "ubuntu/focal64"
	main.vm.provider "virtualbox" do |vb|
	  vb.memory = "8192" 
	end
    main.vm.hostname = "main"
    main.vm.network "private_network", ip: "192.168.137.120"
    main.vm.network "forwarded_port", guest:443, host:8443, auto_correct: false
    main.vm.provision "shell", inline: <<-SHELL
      set -o xtrace    
      sudo apt-get update
      snap install microk8s --classic
      microk8s kubectl apply -f /vagrant/data/DataVolume.yaml
      usermod -a -G microk8s vagrant
      microk8s enable dns 
      # calico nicht von hub.docker.com holen
      sudo sed -i -e 's|image: calico|image: quay.io/calico|g' /var/snap/microk8s/current/args/cni-network/cni.yaml
      sudo microk8s kubectl apply -f /var/snap/microk8s/current/args/cni-network/cni.yaml 
      # kubectl einrichten 
      mkdir -p /home/vagrant/.kube
      microk8s config >/home/vagrant/.kube/config
      chown -f -R vagrant:vagrant /home/vagrant/.kube
      curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
      chmod +x ./kubectl
      sudo mv ./kubectl /usr/local/bin/kubectl
      # snap install kubectl --classic       
      microk8s kubectl apply -f https://raw.githubusercontent.com/mc-b/duk/master/addons/dashboard-skip-login-no-ingress.yaml
      # Helm 
      microk8s enable helm3
      # Monitoring
      microk8s kubectl create namespace monitoring
      microk8s helm3 repo add prometheus-community https://prometheus-community.github.io/helm-charts
      microk8s helm3 repo update
      microk8s helm3 install prometheus prometheus-community/kube-prometheus-stack --namespace=monitoring
      su - vagrant -c "kubectl -n monitoring get service -l app.kubernetes.io/name=grafana -o yaml | sed 's/ClusterIP/NodePort/g' | kubectl apply -f -"
      su - vagrant -c "kubectl -n monitoring get service -l app=kube-prometheus-stack-prometheus -o yaml | sed 's/ClusterIP/NodePort/g' | kubectl apply -f -"
      su - vagrant -c "kubectl -n monitoring get service -l app=kube-prometheus-stack-alertmanager -o yaml | sed 's/ClusterIP/NodePort/g' | kubectl apply -f -"
      # Service Mesh: Istio
      curl -L https://istio.io/downloadIstio | ISTIO_VERSION=1.10.2 sh -
      sudo cp istio-1.10.2/bin/istioctl /usr/local/bin/
      sudo chown -R vagrant:vagrant istio-1.10.2
      su - vagrant -c "istioctl install -y --set profile=demo"
      microk8s kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.10/samples/addons/prometheus.yaml
      microk8s kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.10/samples/addons/kiali.yaml
      microk8s kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.10/samples/addons/jaeger.yaml
      su - vagrant -c "kubectl get service -n istio-system -l app=kiali  -o yaml | sed 's/ClusterIP/NodePort/g' | kubectl apply -f -"
      su - vagrant -c "kubectl get service -n istio-system -l app=jaeger -o yaml | sed 's/ClusterIP/NodePort/g' | kubectl apply -f -"
      microk8s kubectl create namespace bookinfo
      microk8s kubectl label namespace bookinfo istio-injection=enabled
      sudo microk8s kubectl apply -f istio-1.10.2/samples/bookinfo/platform/kube/bookinfo.yaml -n bookinfo
      sudo microk8s kubectl apply -f istio-1.10.2/samples/bookinfo/networking/bookinfo-gateway.yaml -n bookinfo
      sudo microk8s kubectl apply -f istio-1.10.2/samples/bookinfo/networking/destination-rule-all.yaml -n bookinfo      
      # Logging
      microk8s kubectl create namespace logging
      microk8s helm3 repo add fluent https://fluent.github.io/helm-charts
      microk8s helm3 repo update
      microk8s helm3 install fluent-bit fluent/fluent-bit --namespace=logging
      # zum Container Images builden
      sudo apt-get install -y docker.io
      sudo usermod -aG docker vagrant 
      # Infos
      set +x
      export SERVER=$(hostname -I | cut -f 2 '-d ')
      echo "------------------------------------------------------------------------------------------"
      echo "Service Mesh"
      echo "Bookinfo App: http://${SERVER}":$(su - vagrant -c "kubectl get service/istio-ingressgateway -n istio-system -o=jsonpath='{ .spec.ports[1].nodePort }'")"/productpage"
      echo "Jaeger UI   : http://${SERVER}":$(su - vagrant -c "kubectl get service/tracing -n istio-system -o=jsonpath='{ .spec.ports[0].nodePort }'")
      echo "Kiali  UI   : http://${SERVER}":$(su - vagrant -c "kubectl get service/kiali -n istio-system -o=jsonpath='{ .spec.ports[0].nodePort }'")
      echo "------------------------------------------------------------------------------------------"
      echo "Monitoring"
      echo "Grafana UI (User/PW: admin/prom-operator): http://${SERVER}":$(su - vagrant -c "kubectl -n monitoring get service -l app.kubernetes.io/name=grafana -o=jsonpath='{ .items[0].spec.ports[0].nodePort }'")
      echo "Prometheus UI                            : http://${SERVER}":$(su - vagrant -c "kubectl -n monitoring get service -l app=kube-prometheus-stack-prometheus -o=jsonpath='{ .items[0].spec.ports[0].nodePort }'")
      echo "Alertmanager UI                          : http://${SERVER}":$(su - vagrant -c "kubectl -n monitoring get service -l app=kube-prometheus-stack-alertmanager -o=jsonpath='{ .items[0].spec.ports[0].nodePort }'")
      echo "------------------------------------------------------------------------------------------"
      echo "Kubernetes Dashboard: https://${SERVER}"
SHELL
  end

 end
